/*
    Meowww
*/
// Int's and defines
int crossPOUND;
int hold;
int waitOn;
int fps_run;
int MENU_SECTION_RUNNING, STARTMENU,dev,MENU;

int DOUBLE_TAP_BTN, DOUBL_TAP_BTN, b_tap, B_tap;
int wait_sec_tap    = 300;  // time for second tap ( click )
int Wait_sec_tap = 200;
int timer,Timer;
int pressed=FALSE, pressed1,pressed2,pressed3;
int pressed2Combo = FALSE;
int tester;
//
int RF_HOLD = 40;
int RF_NULL = 30;
int VIBRATE_RUMBLE;
int blocker;

init{
 
 fps_run = FALSE;
 crossPOUND = FALSE;
 dev=3;
 DOUBLE_TAP_BTN = PS4_CROSS;
 tester = 0;
}

main {
//dev logs
  if(get_val(PS4_CIRCLE) && get_val(PS4_CROSS) &&!get_val(PS4_L1)&&!get_val(PS4_L2)){

  if(event_press(PS4_LEFT)) { tester = tester - 1 }
  if(event_press(PS4_RIGHT)) { tester = tester + 1 }
  if(event_press(PS4_DOWN)) { tester = tester - 10 }
  if(event_press(PS4_UP)) { tester = tester + 10 }
  	if(tester < 0)
			tester = 10;
		if(tester > 10)
			tester = 0;
  }
  
  if(tester)
	{
    set_val(TRACE_1, tester);
  }

  else if(tester ==1)
	{
    
    set_val(TRACE_1, tester);
    set_val(TRACE_2, Wait_sec_tap);
    // set_val(TRACE_2, pressedXXTimer);
    // set_val(TRACE_2, wait_timer);
    set_val(TRACE_3, pressed1);
    set_val(TRACE_6, B_tap);
    set_val(TRACE_4, Timer);
    set_val(TRACE_5, timer);
  }
  else if(tester ==2)
	{
    
    set_val(TRACE_1, tester);
    set_val(TRACE_2, pressed);
    set_val(TRACE_3, b_tap);
    set_val(TRACE_4, B_tap);
    set_val(TRACE_5, timer);
    set_val(TRACE_6, Timer);
  }
  else if(tester ==3)
	{
    set_val(TRACE_1, tester);
    set_val(TRACE_2, pressed);
    set_val(TRACE_3, pressed1);
    set_val(TRACE_4, pressed2);
    set_val(TRACE_5, pressed3);
  }
  else if(tester ==4)
	{
    set_val(TRACE_1, tester);
    set_val(TRACE_2, wait_sec_tap);
    set_val(TRACE_3, b_tap);
    set_val(TRACE_4, timer);
  }
  else if(tester ==10)
	{
    set_val(TRACE_1, tester);
    // set_val(TRACE_2, fasttonics_mode);
    // set_val(TRACE_3, fasttonics_on);
    // set_val(TRACE_4, gvd200);
    // set_val(TRACE_5, gvd200);
    // set_val(TRACE_6, eagle_vision);
    // set_val(TRACE_3, idkanymore);
    // set_val(TRACE_4, timer);
    // set_val(TRACE_5, wait_timer);
    // set_val(TRACE_6, wait_pressed);
  }
////////
//dev logs
  // if(dev==1){
  //   set_val(TRACE_1, dev);
  //   set_val(TRACE_6, pressed);
  //   set_val(TRACE_2, hold)`;
  //   set_val(TRACE_3, crossPOUND)`;
  //   set_val(TRACE_4, waitOn)`;
  //   set_val(TRACE_5, combo_running(combo1))`;
  // }
  // if(dev==2){
  //   set_val(TRACE_1, dev);
  //   set_val(TRACE_2, MENU_SECTION_RUNNING);
  //   set_val(TRACE_3, STARTMENU);
  //   set_val(TRACE_4, MENU);
  // }
  // if(dev==3){
  //   set_val(TRACE_1, dev);
  //   set_val(TRACE_2, b_tap);
  //   set_val(TRACE_3, timer);
  //   set_val(TRACE_4, wait_sec_tap);
  //   set_val(TRACE_5, pressed);
  //   set_val(TRACE_6, pressed2Combo);
  // }
  // if(dev==4){
  //   set_val(TRACE_1, dev);
  //   set_val(TRACE_2, b_tap);
  //   set_val(TRACE_3, timer);
  //   set_val(TRACE_4, wait_sec_tap);
  // }

  // if(get_val(PS4_L2)&& get_val(PS4_CIRCLE) && !get_val(PS4_R1))
  // {
  //   if(event_press(PS4_RIGHT))
	// 	  dev += 1;					
	// 	if(event_press(PS4_LEFT))
	// 		dev -= 1;
							
	// 	if(dev < 0)
	// 		dev = 2;
	// 	if(dev > 2)
	// 		dev = 0;
  // }
  
////////////

// sTOP the code in menus
  if((get_lval(PS4_LEFT)||get_lval(PS4_LEFT)&&get_ptime(PS4_LEFT)>800)||(get_lval(PS4_RIGHT)||get_lval(PS4_RIGHT)&&get_ptime(PS4_RIGHT)>800)||event_press(PS4_OPTIONS) &&!STARTMENU)
  {
    MENU_SECTION_RUNNING=TRUE;
    STARTMENU=TRUE;
  }
  else if(event_press(PS4_OPTIONS) &&STARTMENU&&MENU) { MENU_SECTION_RUNNING=TRUE; STARTMENU=TRUE; }

 
  if(MENU_SECTION_RUNNING)
  {
    if(event_press(PS4_CROSS)) MENU = MENU + 1;  
    if(event_press(PS4_CIRCLE))MENU = MENU - 1;
    if((MENU<0)||( get_lval(PS4_CIRCLE)&&get_ptime(PS4_CIRCLE)>800)||get_lval(PS4_OPTIONS)&&get_ptime(PS4_OPTIONS)>800) { /*SNIPER_RIFLE=TRUE; */MENU=0; STARTMENU=0; MENU_SECTION_RUNNING=FALSE;  }
  }
/////////////

//testing functions
  if(firsttap()) {
    if(!MENU_SECTION_RUNNING && !get_val(PS4_L2) && get_val(DOUBLE_TAP_BTN)) {
      // combo_run(firstTap); 
    }
  }

  if(secondtap()) {
    if(!MENU_SECTION_RUNNING && !get_val(PS4_L2) && get_val(DOUBLE_TAP_BTN)) {
      // combo_run(firstTap); 
    }
  }
///////

// // // First tap
//   if (!MENU_SECTION_RUNNING &&!get_val(PS4_L2) && event_press(DOUBL_TAP_BTN) && !b_tap) {pressed1 = FALSE;b_tap=TRUE; timer = wait_sec_tap; }
//   else if (event_press(DOUBL_TAP_BTN) && b_tap ){ b_tap=FALSE; combo_run(vib2x); pressed=TRUE; pressed2Combo = TRUE; }
//  // /////////////////////////////////////////////////


// // Second First tap
//   if (event_press(DOUBL_TAP_BTN) && pressed && !B_tap) {
//     pressed= FALSE;
//     B_tap=TRUE;
//     Timer = Wait_sec_tap;
//   // } else if (event_press(DOUBL_TAP_BTN) && pressed && B_tap) {
//   //   B_tap=FALSE;
//   //   pressed= FALSE;

//     //
//   }
  // else if (event_press(DOUBL_TAP_BTN) && B_tap && !pressed1){/* Thirt tap*/
  //   B_tap=FALSE;
  //   pressed2=TRUE;
  //   pressed3=TRUE;
  //   combo_run(combo1);
  //   }

// /////////////////////////////////////////////////
    if(timer>0) {
      timer= timer -get_rtime();
      if(timer <= 0 )
      {
        b_tap=FALSE;
      }
    }
    ////////////////////////////
    if(Timer>0) {
      Timer= Timer -get_rtime();
      // if(timer <= 0) b_tap=FALSE;
      if(Timer <= 0 && !pressed)
      {
        B_tap=FALSE;
      }
    }
    ////////////////////////////
    if(event_release(DOUBLE_TAP_BTN) &pressed2 &pressed2Combo) pressed2Combo = FALSE; pressed1= FALSE;
    if(event_release(DOUBLE_TAP_BTN) &pressed3) pressed3= FALSE;


//testing functions
  if(myfunction()) {
    if(get_val(XB1_RT)) {
      combo_run(Rapid_Fire); 
    }
  }
///////
}

// FUNCTIONS
  function firsttap() {
    // if(get_val(DOUBL_TAP_BTN)) {
    if(!MENU_SECTION_RUNNING &&!get_val(PS4_L2) && event_press(DOUBLE_TAP_BTN) && !b_tap)
    {
      pressed1 = FALSE;b_tap=TRUE; timer = wait_sec_tap;

    
      set_val(XB1_A, 0);
      set_val(XB1_B, 0);
      set_val(XB1_LB, 0);
      set_val(XB1_RB, 0);
      set_val(XB1_VIEW, 0);
      return 0;
    }
    else if (event_press(DOUBLE_TAP_BTN) && b_tap )
    {
      b_tap=FALSE; combo_run(vib2x); pressed=TRUE; pressed2Combo = TRUE;
      set_val(XB1_A, 0);
      set_val(XB1_B, 0);
      set_val(XB1_LB, 0);
      set_val(XB1_RB, 0);
      set_val(XB1_VIEW, 0);
      return 0;
    }
      return 1;
  }
  function secondtap() {
    // if(get_val(DOUBL_TAP_BTN)) {
    if (event_press(DOUBLE_TAP_BTN) && pressed && !B_tap) {
    pressed= FALSE;
    B_tap=TRUE;
    Timer = Wait_sec_tap;
  }
  else if (event_press(DOUBLE_TAP_BTN) && B_tap && !pressed1){/* Thirt tap*/
    B_tap=FALSE;
    pressed2=TRUE;
    pressed3=TRUE;
    combo_run(combo1);
    return 0;
  }
      return 1;
}

  combo firstTap{

  }
  // function XY(BUTTON, VALUE)
  // {
  //   if(abs(get_lval(BUTTON))<25)
  //   return VALUE;
  //   return get_lval(BUTTON);
  // }

  function vibrate(BOOL)
  {
    if(BOOL) VIBRATE_RUMBLE = RUMBLE_A; 
    if(!BOOL)VIBRATE_RUMBLE = RUMBLE_B;
    combo_run(vibrate);
  }

  function myfunction() {
    if(get_val(PS4_SQUARE)) {
      if(get_val(XB1_A))
        RF_HOLD = adjust_speed(RF_HOLD, 10, 1000, 10);
       if(get_val(XB1_B))
        RF_NULL = adjust_speed(RF_NULL, 10, 1000, 10);
      set_val(XB1_A, 0);
      set_val(XB1_B, 0);
      set_val(XB1_LB, 0);
      set_val(XB1_RB, 0);
      set_val(XB1_VIEW, 0);
      set_val(TRACE_1, RF_HOLD / 10);
      set_val(TRACE_2, RF_NULL / 10);
      return 0;
    }
  return 1;
  }
  function adjust_speed(var, min_value, max_value, adjustment_increment) {
    if(event_press(XB1_RB) && var < max_value)
      var = var + adjustment_increment;
    if(event_press(XB1_LB) && var > min_value)
      var = var - adjustment_increment;
    return var;
  }
//
  
  /*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
  |                                                     COMBO SECTION                                                     |
  ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ —*/	

combo RUMBLE_ON {						// 2 high rumbles + green blink 2 times
	set_ledx(2, 2);
	set_rumble(RUMBLE_B, 50);
	wait(150);
	reset_rumble();
	wait(100);
	set_rumble(RUMBLE_B, 50);
	wait(150);
	reset_rumble();
}

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 



// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

combo RUMBLE_OFF {						// 1 high rumble + red blink 1 time
	set_ledx(1, 1);
	set_rumble(RUMBLE_A, 50);
	wait(300);
	reset_rumble();
	wait(400);
}

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 
combo vibrate
{
	set_rumble(VIBRATE_RUMBLE,25);
	wait(200);
	reset_rumble();
}
combo vib1x {						// 2 high rumbles + green blink 2 times
	set_ledx(2, 2);
	set_rumble(RUMBLE_B, 50);
	wait(150);
	reset_rumble();
	wait(100);
	set_rumble(RUMBLE_B, 50);
	wait(150);
	reset_rumble();
}

combo vib2x
{
	set_rumble(VIBRATE_RUMBLE,25);
	wait(200);
	reset_rumble();
	wait(200);
	set_rumble(VIBRATE_RUMBLE,25);
	wait(200);
	reset_rumble();
	wait(200);
}
combo vib3x
{
	set_rumble(VIBRATE_RUMBLE,25);
	wait(200);
	reset_rumble();
	wait(200);
	set_rumble(VIBRATE_RUMBLE,25);
	wait(200);
	reset_rumble();
	wait(200);
	set_rumble(VIBRATE_RUMBLE,25);
	wait(200);
	reset_rumble();
	wait(200);
}
combo combo1{
  set_val(PS4_L3,100);
  wait(100);
  set_val(PS4_L3,0);
  wait(50);
  set_val(PS4_L3,100);
  wait(100);
  set_val(PS4_L3,0);
  wait(50);
  fps_run=TRUE;
}
combo Rapid_Fire {
  set_val(XB1_RT, 100);
  wait(RF_HOLD);
  set_val(XB1_RT, 0);
  wait(RF_NULL);
  set_val(XB1_RT, 0);
}